# Enable true colors
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# Automatic config reloading
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# tpm plugin
set -g @plugin 'tmux-plugins/tpm'

# Have to load the theme before loading of tmux-powerline
# so it doesn't set the separators on first load
source-file ~/.config/tmux/themes/dayfox.conf

set -g @plugin 'erikw/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'sainnhe/tmux-fzf'

set -g @plugin 'jaclu/tmux-menus'

# Copy to system clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

set -g set-titles on
set -g automatic-rename on
set -g set-titles-string "#S / #W"

set -s escape-time 1 # Remove delay on commands

set -g prefix C-a # Change default prefix to Ctrl + a
unbind C-b # Unbind the previous default prefix
bind-key C-a send-prefix # Set the new prefix

# Force cursor shape as blinking bar (xterm)
# https://neovim.io/doc/user/term.html#tui-cursor-shape
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[5 q'

# Create custom window splitting shortcuts
unbind %
bind | split-window -h

unbind '"'
bind - split-window -v

# Window management and numbering
set -g base-index 1 # Start numbering windows at 1
setw -g pane-base-index 1
set -g renumber-windows on

# Navigate windows using Ctrl+Tab and Ctrl+Shift+Tab
bind -n C-Tab next-window
bind -n C-S-Tab previous-window
bind -T prefix p previous-window

# Switch to Last Session and Window
bind-key -T prefix BSpace last-window # Switch to the last window
bind-key -T prefix Space switch-client -l # Switch to the last session

set -g mouse on

# Swap windows
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1


# Smart maximize that detects Vim and sends leader+wm to Vim when active
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind -r m if-shell "$is_vim" 'send-keys \\ wm; resize-pane -Z' 'resize-pane -Z'

# Navigate Pane when Maximized
# Custom binding to navigate to next pane while staying zoomed
bind-key ] select-pane -t :.+ \; resize-pane -Z

# Custom binding to navigate to previous pane while staying zoomed
bind-key [ select-pane -t :.- \; resize-pane -Z

# Set vi mode for copy mode
setw -g mode-keys vi

# Setup vim-like bindings for selection in copy mode
bind -T copy-mode-vi v send-keys -X begin-selection    # 'v' to begin selection
bind -T copy-mode-vi V send-keys -X select-line        # 'V' to select entire line
bind -T copy-mode-vi y send-keys -X copy-selection     # 'y' to copy selection
bind -T copy-mode-vi r send-keys -X rectangle-toggle   # 'r' to toggle rectangle selection

# Allow arrow keys in copy mode
bind -T copy-mode-vi Up send-keys -X cursor-up
bind -T copy-mode-vi Down send-keys -X cursor-down
bind -T copy-mode-vi Left send-keys -X cursor-left
bind -T copy-mode-vi Right send-keys -X cursor-right

# Map Esc to exit copy-mode
bind -T copy-mode-vi Escape send-keys -X cancel

# Use Ctrl+b / to enter copy mode
bind / copy-mode -u

# Pane resizing shortcuts
# Enable resizing panes with Ctrl+Shift+Up/Down
bind -n C-S-Up resize-pane -U 2
bind -n C-S-Down resize-pane -D 2

# Smart handling for Ctrl+Shift+Left/Right with Vim awareness
bind-key -n 'C-S-Left' if-shell "$is_vim" 'send-keys C-S-Left' 'resize-pane -L 2'
bind-key -n 'C-S-Right' if-shell "$is_vim" 'send-keys C-S-Right' 'resize-pane -R 2'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# The vim-tmux-navigator plugin is not being used here because it doesn't work when you switch to arrow keys
# The plugin has to be replicated in entirety with Ctrl + Arrow key shortcuts for it to work
bind-key -n 'C-Left' if-shell "$is_vim" 'send-keys C-Left'  'select-pane -L'
bind-key -n 'C-Down' if-shell "$is_vim" 'send-keys C-Down'  'select-pane -D'
bind-key -n 'C-Up' if-shell "$is_vim" 'send-keys C-Up'  'select-pane -U'
bind-key -n 'C-Right' if-shell "$is_vim" 'send-keys C-Right'  'select-pane -R'

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-Left'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-Down'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-Up'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-Right'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-Left' select-pane -L
bind-key -T copy-mode-vi 'C-Down' select-pane -D
bind-key -T copy-mode-vi 'C-Up' select-pane -U
bind-key -T copy-mode-vi 'C-Right' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Add copy mode bindings for Ctrl+Shift as well
bind-key -T copy-mode-vi 'C-S-Left' resize-pane -L 2
bind-key -T copy-mode-vi 'C-S-Right' resize-pane -R 2
bind-key -T copy-mode-vi 'C-S-Up' resize-pane -U 2
bind-key -T copy-mode-vi 'C-S-Down' resize-pane -D 2

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Add copy mode bindings for Ctrl+Shift as well
bind-key -T copy-mode-vi 'C-S-h' resize-pane -L 2
bind-key -T copy-mode-vi 'C-S-l' resize-pane -R 2
bind-key -T copy-mode-vi 'C-S-k' resize-pane -U 2
bind-key -T copy-mode-vi 'C-S-j' resize-pane -D 2

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
